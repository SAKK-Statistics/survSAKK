text(text_xpos, max(text_ypos) + segment.annotation.space, label = paste0("Median [95%]"), pos = pos,
col = "black", cex = segment.cex, font = segment.main.font)
} else {text(text_xpos, max(text_ypos) + segment.annotation.space, label = paste0(segment.quantile,"-Quantile [95%]"), pos = pos,
col = "black", cex = segment.cex, font = segment.main.font)
}
} else if (is.null(segment.main) & !is.null(segment.timepoint)){
text(text_xpos, max(text_ypos) + segment.annotation.space, label = paste0(segment.quantile,"Survival [95%]"), pos = pos,
col = "black", cex = segment.cex, font = segment.main.font)
}
}
# 4. SURV.STATS ####
## Define different options for stat position ####
if (length(stat.position) == 2){
# If it's a numeric vector (x, y coordinates)
stat_xpos <- stat.position[1]
stat_ypos <- stat.position[2]
# Position the text to the right of the specified (x,y)
pos <- 4 #vorher 1
} else if (stat.position == "bottomleft"){
stat_ypos <- 0.03
stat_xpos <- min(xlim)
pos <- 4
} else if (stat.position == "left"){
stat_ypos <- 0.53
stat_xpos <- min(xlim)
pos <- 4
}else if (stat.position == "right"){
stat_ypos <- 0.53
stat_xpos <- max(xlim)
# Position the text to the left of the specified (x,y)
pos <- 2
} else if (stat.position == "bottomright"){
stat_ypos <- 0.03
stat_xpos <- max(xlim)
pos <- 2
} else if (stat.position == "topright"){
stat_ypos <- max(ylim) * 0.95 # marginal smaller than max(xlim) to ensure that the text is not cut off.
stat_xpos <- max(xlim)
pos <- 2
}
## Log rank test ####
# To compare the survival curves of two or more groups
logrank <- fit$call
logrank$conf.type <- NULL
logrank$conf.int <- NULL
logrank[1] <- call("survdiff")
# Check first if strata > 1
if(is.null(fit$strata)){
logrank <- NULL
} else {
logrank <- eval(logrank)
# Recalculating p-Value
logrankpval <- as.numeric(format.pval(1 - pchisq(logrank$chisq, df = length(logrank$n) - 1), esp = 0.001))
logrankpval <- round.pval(logrankpval)
}
## Cox proportional hazard regression ####
# To describe the effect of variables on survival
model <- fit$call
model$conf.type <- NULL
model$conf.int <- NULL
model[1] <- call("coxph")
model <- summary(eval(model))
## Display statistics in the plot ####
if(stat == "logrank"){
stats <- paste0("Logrank test: ", logrankpval)
} else if(stat == "coxph"){
stats <- paste0("HR ",
round(model$conf.int[,"exp(coef)"], digits = 2),
" (95% CI: ",
round(model$conf.int[,"lower .95"], digits = 2),
" to ",
round(model$conf.int[,"upper .95"], digits = 2),
")")
} else if(stat == "coxmodel"){
if(stat.position == "right"){
# table is always written from the specified x,y pos from left to right
# therefore tables _right position is outside of the border.
# And has to be corrected for tables.
# Extract infos and create data frame from model
tbl <- data.frame(N = model$n,
Events = model$nevent,
HR = round(model$conf.int[,"exp(coef)"], digits = 2),
lwrCI = round(model$conf.int[,"lower .95"], digits = 2),
uprCI = round(model$conf.int[,"upper .95"], digits = 2),
Logrank = logrankpval)
# Annotation
# plottbl() function was written to allow to plot different tables reproducible
plottbl(x = stat_xpos * 0.6,
y = stat_ypos,
tbl,
cex = stat.cex,
text.col = stat.col)
} else if(stat.position == "bottomright"){
# table is always written from the specified x,y pos from left to right
# therefore tables _right position is outside of the border.
# And has to be corrected for tables.
# Extract infos and create data frame from model
tbl <- data.frame(N = model$n,
Events = model$nevent,
HR = round(model$conf.int[,"exp(coef)"], digits = 2),
lwrCI = round(model$conf.int[,"lower .95"], digits = 2),
uprCI = round(model$conf.int[,"upper .95"], digits = 2),
Logrank = logrankpval)
# Annotation
# plottbl() function was written to allow to plot different tables reproducible
plottbl(x = stat_xpos * 0.6, # 0.7
y = stat_ypos * 3,
tbl,
cex = stat.cex,
text.col = stat.col)
} else if(stat.position == "topright"){
# table is always written from the specified x,y pos from left to right
# therefore tables _right position is outside of the border.
# And has to be corrected for tables.
# Extract infos and create data frame from model
tbl <- data.frame(N = model$n,
Events = model$nevent,
HR = round(model$conf.int[,"exp(coef)"], digits = 2),
lwrCI = round(model$conf.int[,"lower .95"], digits = 2),
uprCI = round(model$conf.int[,"upper .95"], digits = 2),
Logrank = logrankpval)
# Annotation
# plottbl() function was written to allow to plot different tables reproducible
plottbl(x = stat_xpos * 0.6, # 0.7
y = stat_ypos * 0.90,
tbl,
cex = stat.cex,
text.col = stat.col)
} else {
# Extract infos and create data frame from model
tbl <- data.frame(N = model$n,
Events = model$nevent,
HR = round(model$conf.int[,"exp(coef)"], digits = 2),
lwrCI = round(model$conf.int[,"lower .95"], digits = 2),
uprCI = round(model$conf.int[,"upper .95"], digits = 2),
Logrank = logrankpval)
# Annotation
# plottbl() function was written to allow to plot different tables reproducible
plottbl(x = stat_xpos,
y = stat_ypos,
tbl,
cex = stat.cex)
}
}
if (stat != "none" && stat != "coxmodel"){
# Annotate the stats in the plot when stat = "coxph, loglik etc.
text(x = stat_xpos,
y = stat_ypos,
labels = stats,
pos = pos,
col = stat.col,
cex = stat.cex,
font = stat.font)
}
# 5. SURV.RISKTABLE ####
if(is.logical(risktable)){
if (risktable == TRUE){
## Extract risktable data ####
obsStrata <- if(is.null(fit$strata)){
obsStrata <- 1
} else {
obsStrata <- fit$strata
}
grp <- rep(1:stratum, times=obsStrata)
# Initialize a matrix 'n.risk.matrix' with zeros
n.risk.matrix <- matrix(0,nrow = length(xlim), ncol = stratum)
# Loop over each stratum and each time point defined by 'xlim'
for (stratum_i in 1:stratum) {
for (x in 1:length(xlim)) {
# Find the indices where the survival time for the current group is greater than the current 'xlim'
index <- which(fit$time[grp == stratum_i] > xlim[x])
# If there are no such indices, set the corresponding element in 'n.risk.matrix' to 0
if (length(index) == 0)
n.risk.matrix[x,stratum_i] <- 0
else
# Otherwise, set the element to the minimum number at risk for the specified group and time point
n.risk.matrix[x,stratum_i] <- fit$n.risk[grp == stratum_i][min(index)]
}
}
## Add risktable.title text to the outer margin ####
mtext(risktable.title, side = 1, outer = FALSE,
line = risktable.pos, adj = NA, at = risktable.title.position,
font = risktable.title.font,
cex = risktable.title.cex,
col = risktable.title.col)
## Add legend text to the outer margin for each stratum ####
for (i in 1:stratum){
mtext(text = legend.name[i], side = 1, outer = FALSE,
line = i+risktable.pos, adj = NA, at = risktable.name.position,
font = risktable.name.font,
cex = risktable.name.cex,
col = risktable.name.col)
}
## Add vector of risk counts text to the margin ####
mtext(text = as.vector(n.risk.matrix), side = 1, outer = FALSE,
line = rep((1:stratum) + risktable.pos, each = length(xlim)),
at = rep(xlim, stratum),
cex = risktable.cex,
col = c(rep(risktable.col, each = length(xlim)))
)
}
} else {
stop("`risktable` expecting TRUE or FALSE as an argument!")
}
} # final closer of the function
surv.plot(fit = veteran_trt_fit_mt,
risktable = TRUE,
grid =FALSE,
col = c("pink","lightblue"),
xlab = "Time (year)",
xlim = seq(0,3),
legend.title = "Treatment Regimens",
legend.name = c("LT60","OV60"),
stat = "coxmodel",
stat.position = "bottomright")
surv.plot(fit = veteran_trt_fit_mt,
risktable = TRUE,
grid =FALSE,
col = c("pink","lightblue"),
xlab = "Time (year)",
xlim = seq(0,3),
legend.title = "Treatment Regimens",
legend.name = c("LT60","OV60"),
stat = "coxmodel",
stat.position = "right")
surv.plot(fit = veteran_trt_fit_mt,
risktable = TRUE,
grid =FALSE,
col = c("pink","lightblue"),
xlab = "Time (year)",
xlim = seq(0,3),
legend.title = "Treatment Regimens",
legend.name = c("LT60","OV60"),
stat = "coxmodel",
stat.position = "topright")
par(mfrow=c(2,1))
# Plot 1
surv.plot(fit = veteran_trt_fit_yr,
bty = 'o',
legend.title = "Treament regimens",
legend.name = c("LT60","OV60"),
legend.text.font = 2,
col = c("darkred", "darkblue"),
xlim = seq(0,3, by = 0.5),
xlab = ("Time (month)"),
segment.quantile = 0.5,
stat = "logrank",
stat.position = "bottomleft",
risktable.col = c("darkred","darkblue"))
# Plot 2
surv.plot(fit = veteran_trt_fit_yr,
grid =TRUE,
col = c("darkgreen","yellow4"),
xlab = "Time (year)",
xlim = seq(0,3, by = 1),
legend.position = "bottomleft",
stat = "coxmodel",
stat.position = "bottomright")
par(mfrow=c(1,1))
par(mfrow=c(2,1))
# Plot 1
surv.plot(fit = veteran_trt_fit_yr,
bty = 'o',
legend.title = "Treament regimens",
legend.name = c("LT60","OV60"),
legend.text.font = 2,
col = c("darkred", "darkblue"),
xlim = seq(0,3, by = 0.5),
xlab = ("Time (month)"),
segment.quantile = 0.5,
stat = "logrank",
stat.position = "bottomleft",
risktable.col = c("darkred","darkblue"))
# Plot 2
surv.plot(fit = veteran_trt_fit_yr,
grid =TRUE,
col = c("darkgreen","yellow4"),
xlab = "Time (year)",
xlim = seq(0,3, by = 1),
legend.position = "bottomleft",
stat = "coxmodel",
stat.position = "bottomright")
par(mfrow=c(1,1))
par(mfrow=c(2,1))
# Plot 1
surv.plot(fit = veteran_trt_fit_yr,
bty = 'o',
cex = 0.8,
legend.title = "Treament regimens",
legend.name = c("LT60","OV60"),
legend.text.font = 2,
col = c("darkred", "darkblue"),
xlim = seq(0,3, by = 0.5),
xlab = ("Time (month)"),
segment.quantile = 0.5,
stat = "logrank",
stat.position = "bottomleft",
risktable.col = c("darkred","darkblue"))
# Plot 2
surv.plot(fit = veteran_trt_fit_yr,
grid =TRUE,
cex = 0.8,
col = c("darkgreen","yellow4"),
xlab = "Time (year)",
xlim = seq(0,3, by = 1),
legend.position = "bottomleft",
stat = "coxmodel",
stat.position = "bottomright")
par(mfrow=c(1,1))
par(mfrow=c(2,1))
# Plot 1
surv.plot(fit = veteran_trt_fit_yr,
bty = 'o',
cex = 0.8,
legend.title = "Treament regimens",
legend.name = c("LT60","OV60"),
legend.text.font = 2,
col = c("darkred", "darkblue"),
xlim = seq(0,3, by = 0.5),
xlab = ("Time (month)"),
segment.quantile = 0.5,
stat = "logrank",
stat.position = "bottomleft",
risktable.col = c("darkred","darkblue"))
# Plot 2
surv.plot(fit = veteran_trt_fit_yr,
grid =TRUE,
cex = 0.8,
col = c("darkgreen","yellow4"),
xlab = "Time (year)",
xlim = seq(0,3, by = 1),
legend.position = "bottomleft",
stat = "coxmodel",
stat.position = "bottomright")
par(mfrow=c(1,1))
par(mfrow=c(2,1))
# Plot 1
surv.plot(fit = veteran_trt_fit_yr,
bty = 'o',
cex = 0.75,
legend.title = "Treament regimens",
legend.name = c("LT60","OV60"),
legend.text.font = 2,
col = c("darkred", "darkblue"),
xlim = seq(0,3, by = 0.5),
xlab = ("Time (month)"),
segment.quantile = 0.5,
stat = "logrank",
stat.position = "bottomleft",
risktable.col = c("darkred","darkblue"))
# Plot 2
surv.plot(fit = veteran_trt_fit_yr,
grid =TRUE,
cex = 0.75,
col = c("darkgreen","yellow4"),
xlab = "Time (year)",
xlim = seq(0,3, by = 1),
legend.position = "bottomleft",
stat = "coxmodel",
stat.position = "bottomright")
par(mfrow=c(1,1))
surv.plot(veteran_trt_fit_yr,
legend.position = "right",
stat = "coxmodel",
stat.position = "topright")
surv.plot(veteran_trt_fit_yr,
legend.position = "right",
stat = "coxmodel",
stat.position = "topright")
surv.plot(veteran_trt_fit_yr,
legend.position = "right",
stat = "coxmodel",
stat.position = "topright")
surv.plot(veteran_trt_fit_yr,
legend.position = "right",
stat = "coxmodel",
stat.position = "topright")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
echo = TRUE,
eval = TRUE,
fig.height = 6,
fig.width = 7,
fig.align='center'
)
# Load required libraries
library(survSAKK)
library(survival)
# Load data
veteran <- survival::veteran
# Define the reference arm
veteran$trt <- factor(veteran$trt,
levels = c(1,2),
labels = c("Standard","Test"))
# Create survival objects
veteran_fit_yr <- survfit(Surv(time / 365.25, status) ~ 1, data = veteran)
veteran_fit_mt <- survfit(Surv(time / 365.25 * 12, status) ~ 1, data = veteran)
veteran_trt_fit_yr <- survfit(Surv(time / 365.25, status) ~ trt, data = veteran)
veteran_trt_fit_mt <- survfit(Surv(time / 365.25 * 12, status) ~ trt, data = veteran)
surv.plot(veteran_fit_yr)
surv.plot(veteran_fit_yr,
# Label
main = "Veterans' Administration Lung Cancer study",
xlab = "Time (year)",
legend.name = c("Veteran's"),
# Limits
xlim = seq(0,3,by = 0.5))
surv.plot(veteran_fit_yr,
# Label
main = "Veterans' Administration Lung Cancer study",
xlab = "Time (year)",
legend.name = c("Veteran's"),
# Limits
xlim = seq(0,3,by = 0.5),
cex = 0.8)
surv.plot(veteran_trt_fit_yr,
# Specifies on which line on the plotting area
# X and Y label should be drawn
xlab.pos = 3,
ylab.pos = 3.75)
surv.plot(veteran_fit_yr,
# How many bottom lines should be drawn
margin.bottom = 10,
# How many left lines should be drawn
margin.left = 8)
surv.plot(veteran_fit_yr,
# Segment Options
segment.quantile = 0.5)
surv.plot(veteran_fit_yr,
# Segment Options
segment.timepoint = 1)
surv.plot(veteran_fit_yr,
# Segment Options
segment.quantile = 0.5,
segment.main = "Median survival time",
segment.annotation = "bottomleft",
segment.cex = 0.75,
segment.col = "darkred")
surv.plot(veteran_fit_yr,
# Segment Options
segment.timepoint = c(0.5,1,2),
segment.type = 2,
segment.annotation = "none")
surv.plot(veteran_fit_yr,
# Segment Options
segment.quantile = 0.5,
segment.type = 1,
segment.cex = 0.75,
segment.font = 3,
segment.main.font = 2)
surv.plot(veteran_fit_yr,
# Segment Options
segment.quantile = 0.5,
segment.annotation = c(3, 0.06),
segment.col = "darkgreen",
## segment type
segment.type = 1,
## segment line type
segment.lty = 'dotted',
## segment line width
segment.lwd = 1.5,
# spacing between the text in unit of x-coordinates
segment.annotation.space = 0.16)
surv.plot(veteran_trt_fit_yr,
stat = "logrank")
surv.plot(veteran_trt_fit_yr,
show.legend = FALSE,
stat = "coxph",
stat.position = "bottomright")
surv.plot(veteran_trt_fit_yr,
legend.position = "right",
stat = "coxmodel",
stat.position = "topright")
surv.plot(veteran_trt_fit_yr,
cex =0.9,
legend.position = "right",
stat = "coxmodel",
stat.position = "topright")
devtools::build_vignettes()
surv.plot(veteran_trt_fit_yr,
legend.position = "right",
stat = "coxmodel",
stat.position = "topright")
surv.plot(veteran_trt_fit_yr,
cex = 0.7
legend.position = "right",
surv.plot(veteran_trt_fit_yr,
cex = 0.7,
legend.position = "right",
stat = "coxmodel",
stat.position = "topright")
surv.plot(veteran_trt_fit_yr,
cex = 0.8,
legend.position = "right",
stat = "coxmodel",
stat.position = "topright")
surv.plot(veteran_trt_fit_yr,
cex = 0.75,
legend.position = "right",
stat = "coxmodel",
stat.position = "topright")
surv.plot(veteran_trt_fit_yr,
cex = 0.8,
legend.position = "right",
stat = "coxmodel",
stat.position = "topright")
devtools::clean_vignettes()
devtools::build_vignettes()
pkgdown::build_site_github_pages()
library(usethis)
?usethis
